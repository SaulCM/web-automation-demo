/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'application'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.18"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {

    // Selenium dependencies for java.
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.10.0'

    // Selenium WebDriver binaries.
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.4.0'

    // Annotations to reduce code verbosity.
    implementation 'org.projectlombok:lombok:1.18.20'

    // JSON simple.
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // Cucumber dependencies.
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.13.0'
    implementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: '7.13.0'
    implementation group: 'io.cucumber', name: 'cucumber-testng', version: '7.13.0'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Apache Log4j.
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'

    // Encryptor library dependency
    implementation 'org.jasypt:jasypt:1.9.3'
}


configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

//Executes Features
tasks.register('executeFeatures', Test) {
    useTestNG()
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.glue=com.trello']
        jvmArgs = ['-Dcucumber.features=src/test/resources/features/']
        jvmArgs = ['-Dcucumber.plugin=pretty,' +
                           'html:build/cucumber/cucumber-report.html,' +
                           'json:build/cucumber/cucumber.json,' +
                           'rerun:build/cucumber/rerun.txt']
    }
    ignoreFailures = true
    scanForTestClasses = false
    testLogging.showStandardStreams = true
}

task cucumberCli() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'html:build/cucumber/cucumber-report.html',
                    '--plugin', 'json:build/cucumber/cucumber.json',
                    '--plugin', 'rerun:build/cucumber/rerun.txt',
                    '--glue', 'com.trello',
                    'src/test/resources/features']
            ignoreExitValue = true
        }
    }
}

cucumberReports {
    projectNameOverride = 'Trello'
    outputDir = file('build/cucumber/reports')
    buildId = '1.0'
    reports = files('build/cucumber/cucumber.json')
}

application {
    // Define the main class for the application.
    mainClass = 'web.automation.demo.App'
}
